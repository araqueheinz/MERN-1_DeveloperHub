{"ast":null,"code":"// Import axios library\nimport axios from 'axios'; // Import our setAlert action\n\nimport { setAlert } from './alert'; // Import our action types\n\nimport { GET_POSTS, GET_POST, UPDATE_LIKES, POST_ERROR, DELETE_POST, ADD_POST, ADD_COMMENT, REMOVE_COMMENT } from './types'; // ADD LIKE\n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/posts/like/\".concat(postId));\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // REMOVE LIKE\n\nexport const removeLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/posts/unlike/\".concat(postId));\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // POST / CREATE COMMENT\n\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    // Save to the database\n    const res = await axios.post(\"/api/posts/comment/\".concat(postId), formData, {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment Created', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // DELETE / REMOVE COMMENT\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(\"/api/posts/comment/\".concat(postId, \"/\").concat(commentId));\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: postId\n    });\n    dispatch(setAlert('Comment Deleted', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // POST / CREATE POST\n\nexport const addPost = formData => async dispatch => {\n  try {\n    // Save to the database\n    const res = await axios.post('/api/posts', formData, {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // GET / READ ONE POST\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts/\".concat(id));\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // GET / READ ALL POSTS\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // DELETE POST\n\nexport const deletePost = postId => async dispatch => {\n  try {\n    await axios.delete(\"/api/posts/\".concat(postId));\n    dispatch({\n      type: DELETE_POST,\n      payload: postId\n    });\n    dispatch(setAlert('Post Deleted', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/heinzaraque/Documents/Web&Udemy-Courses/7 - Brad Traversy/MERN Stack Front To Back/client/src/actions/post.js"],"names":["axios","setAlert","GET_POSTS","GET_POST","UPDATE_LIKES","POST_ERROR","DELETE_POST","ADD_POST","ADD_COMMENT","REMOVE_COMMENT","addLike","postId","dispatch","res","put","type","payload","likes","data","error","msg","response","statusText","status","removeLike","addComment","formData","post","headers","deleteComment","commentId","delete","addPost","getPost","id","get","getPosts","deletePost"],"mappings":"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","sourcesContent":["// Import axios library\nimport axios from 'axios';\n\n// Import our setAlert action\nimport { setAlert } from './alert';\n\n// Import our action types\nimport { GET_POSTS, GET_POST, UPDATE_LIKES, POST_ERROR, DELETE_POST, ADD_POST, ADD_COMMENT, REMOVE_COMMENT } from './types';\n\n// ADD LIKE\nexport const addLike = (postId) => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { postId, likes: res.data }\n    });\n\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    });\n  }\n};\n\n// REMOVE LIKE\nexport const removeLike = (postId) => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { postId, likes: res.data }\n    });\n\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    });\n  }\n};\n\n// POST / CREATE COMMENT\nexport const addComment = (postId, formData) => async dispatch => {\n\n  try {\n    // Save to the database\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, { headers: { 'Content-type': 'application/json' } });\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Comment Created', 'success'));\n\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    });\n  }\n};\n\n// DELETE / REMOVE COMMENT\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: postId,\n    });\n\n    dispatch(setAlert('Comment Deleted', 'success'));\n\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    });\n  }\n};\n\n// POST / CREATE POST\nexport const addPost = (formData) => async dispatch => {\n\n  try {\n    // Save to the database\n    const res = await axios.post('/api/posts', formData, { headers: { 'Content-type': 'application/json' } });\n\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Post Created', 'success'));\n\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    });\n  }\n};\n\n// GET / READ ONE POST\nexport const getPost = (id) => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`)\n\n    dispatch({\n      type: GET_POST,\n      payload: res.data,\n    })\n    \n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    });\n    \n  }\n}\n\n// GET / READ ALL POSTS\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts')\n\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data,\n    })\n    \n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    });\n    \n  }\n}\n\n// DELETE POST\nexport const deletePost = (postId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${postId}`);\n\n    dispatch({\n      type: DELETE_POST,\n      payload: postId,\n    });\n\n    dispatch(setAlert('Post Deleted', 'success'));\n\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}