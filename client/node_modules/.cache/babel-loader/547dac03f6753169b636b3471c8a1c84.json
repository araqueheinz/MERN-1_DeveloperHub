{"ast":null,"code":"// Import axios library\nimport axios from 'axios'; // Import our setAlert action\n\nimport { setAlert } from './alert'; // Import our action types\n\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types'; // Import our setAuthToken utils\n\nimport setAuthToken from '../utils/setAuthToken'; // LOAD USER\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // REGISTER USER\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const body = {\n    name,\n    email,\n    password\n  };\n\n  try {\n    // Save to the database\n    const res = await axios.post('/api/users', body, {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(element => dispatch(setAlert(element.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // LOGIN USER USER\n\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    // Save to the database\n    const res = await axios.post('/api/auth', body, {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(element => dispatch(setAlert(element.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // LOGOUT USER\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/heinzaraque/Documents/Web&Udemy-Courses/7 - Brad Traversy/MERN Stack Front To Back/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","register","name","email","password","body","post","headers","errors","response","forEach","element","msg","login","logout"],"mappings":"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","sourcesContent":["// Import axios library\nimport axios from 'axios';\n\n// Import our setAlert action\nimport { setAlert } from './alert';\n\n// Import our action types\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE  } from './types';\n\n// Import our setAuthToken utils\nimport setAuthToken from '../utils/setAuthToken';\n\n// LOAD USER\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR,\n    })\n  }\n}\n\n// REGISTER USER\nexport const register = ({ name, email, password }) => async dispatch => {\n  const body = {\n    name,\n    email,\n    password,\n  }\n\n  try {\n    // Save to the database\n    const res = await axios.post('/api/users', body, { headers: { 'Content-type': 'application/json' }});\n    \n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (error) {\n\n    const errors = error.response.data.errors;\n    if(errors) {\n      errors.forEach(element => dispatch(setAlert(element.msg, 'danger')));\n    } \n\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n}\n\n// LOGIN USER USER\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password,\n  } \n\n  try {\n    // Save to the database\n    const res = await axios.post('/api/auth', body, { headers: { 'Content-type': 'application/json' }});\n    \n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    }); \n\n    dispatch(loadUser())\n  } catch (error) {\n\n    const errors = error.response.data.errors;\n    if(errors) {\n      errors.forEach(element => dispatch(setAlert(element.msg, 'danger')));\n    } \n\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n}\n\n// LOGOUT USER\nexport const logout = () => dispatch => {\n  dispatch({ type: LOGOUT });\n};"]},"metadata":{},"sourceType":"module"}