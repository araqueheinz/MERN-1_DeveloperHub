{"ast":null,"code":"import _defineProperty from \"/Users/heinzaraque/Documents/Web&Udemy-Courses/7 - Brad Traversy/MERN Stack Front To Back/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_POSTS, GET_POST, POST_ERROR, UPDATE_LIKES, ADD_POST, DELETE_POST } from '../actions/types';\nexport default function (state = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n}, action) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    // CREATE\n    case ADD_POST:\n      return _objectSpread({}, state, {\n        posts: [payload, ...state.posts],\n        loading: false\n      });\n    // READ ONE POST\n\n    case GET_POST:\n      return _objectSpread({}, state, {\n        post: payload,\n        loading: false\n      });\n    // READ ALL POSTS\n\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n    // DELETE\n\n    case DELETE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      });\n\n    case POST_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    case UPDATE_LIKES:\n      return _objectSpread({}, state, {\n        posts: state.posts.map(post => post._id === payload.postId ? _objectSpread({}, post, {\n          likes: payload.likes\n        }) : post),\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/heinzaraque/Documents/Web&Udemy-Courses/7 - Brad Traversy/MERN Stack Front To Back/client/src/reducers/post.js"],"names":["GET_POSTS","GET_POST","POST_ERROR","UPDATE_LIKES","ADD_POST","DELETE_POST","state","posts","post","loading","error","action","type","payload","filter","_id","map","postId","likes"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,YAA1C,EAAwDC,QAAxD,EAAkEC,WAAlE,QAAqF,kBAArF;AAGA,eAAe,UAAUC,KAAK,GAAG;AAC/BC,EAAAA,KAAK,EAAE,EADwB;AAE/BC,EAAAA,IAAI,EAAE,IAFyB;AAG/BC,EAAAA,OAAO,EAAE,IAHsB;AAI/BC,EAAAA,KAAK,EAAE;AAJwB,CAAlB,EAKZC,MALY,EAKJ;AAAA,QACDC,IADC,GACiBD,MADjB,CACDC,IADC;AAAA,QACKC,OADL,GACiBF,MADjB,CACKE,OADL;;AAET,UAAQD,IAAR;AAEE;AACA,SAAKR,QAAL;AACE,+BACKE,KADL;AAEEC,QAAAA,KAAK,EAAE,CAACM,OAAD,EAAU,GAAGP,KAAK,CAACC,KAAnB,CAFT;AAGEE,QAAAA,OAAO,EAAE;AAHX;AAMF;;AACA,SAAKR,QAAL;AACE,+BACKK,KADL;AAEEE,QAAAA,IAAI,EAAEK,OAFR;AAGEJ,QAAAA,OAAO,EAAE;AAHX;AAMF;;AACA,SAAKT,SAAL;AACE,+BACKM,KADL;AAEEC,QAAAA,KAAK,EAAEM,OAFT;AAGEJ,QAAAA,OAAO,EAAE;AAHX;AAMF;;AACA,SAAKJ,WAAL;AACA,+BACKC,KADL;AAEEC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYO,MAAZ,CAAmBN,IAAI,IAAIA,IAAI,CAACO,GAAL,KAAaF,OAAxC,CAFT;AAGEJ,QAAAA,OAAO,EAAE;AAHX;;AAMA,SAAKP,UAAL;AACE,+BACKI,KADL;AAEEI,QAAAA,KAAK,EAAEG,OAFT;AAGEJ,QAAAA,OAAO,EAAE;AAHX;;AAMF,SAAKN,YAAL;AACE,+BACKG,KADL;AAEEC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYS,GAAZ,CAAgBR,IAAI,IACzBA,IAAI,CAACO,GAAL,KAAaF,OAAO,CAACI,MAArB,qBAAmCT,IAAnC;AAAyCU,UAAAA,KAAK,EAAEL,OAAO,CAACK;AAAxD,aAAkEV,IAD7D,CAFT;AAKEC,QAAAA,OAAO,EAAE;AALX;;AAQF;AACE,aAAOH,KAAP;AAnDJ;AAqDD","sourcesContent":["import { GET_POSTS, GET_POST, POST_ERROR, UPDATE_LIKES, ADD_POST, DELETE_POST } from '../actions/types';\n\n\nexport default function( state = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n}, action) {\n  const { type, payload } = action;\n  switch (type) {\n\n    // CREATE\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false,\n      };\n    \n    // READ ONE POST\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false\n      };\n\n    // READ ALL POSTS\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false,\n      };\n    \n    // DELETE\n    case DELETE_POST: \n    return {\n      ...state,\n      posts: state.posts.filter(post => post._id !== payload),\n      loading: false,\n    }\n\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n\n    case UPDATE_LIKES:\n      return  {\n        ...state,\n        posts: state.posts.map(post =>\n          post._id === payload.postId ? { ...post, likes: payload.likes } : post\n        ),\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}