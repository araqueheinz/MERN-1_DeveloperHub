{"ast":null,"code":"// Import axios library\nimport axios from 'axios'; // Import our action Types\n\nimport { GET_PROFILE, PROFILE_ERROR } from '../actions/types'; // Import our setAlert action\n\nimport { setAlert } from './alert'; // GET / READ PROFILE\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // POST / CREATE PROFILE / EDIT\n\nexport const createProfile = (formData, // We want to redirect the user after we submit the form, so we use the history object to push to a different client side route.\nhistory, // Parameter to determine if it is a create or edit profile.\nedit = false) => async dispatch => {\n  try {\n    // Make the api call\n    const res = await axios.post('/api/profile/', formData, {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    if (!edit) {\n      // Redirect\n      history.push('/dashboard');\n    }\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(element => dispatch(setAlert(element.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // PUT / ADD EXPERIENCE\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('/api/profile/experience', formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/heinzaraque/Documents/Web&Udemy-Courses/7 - Brad Traversy/MERN Stack Front To Back/client/src/actions/profile.js"],"names":["axios","GET_PROFILE","PROFILE_ERROR","setAlert","getCurrentProfile","dispatch","res","get","type","payload","data","error","msg","response","statusText","status","createProfile","formData","history","edit","post","headers","push","errors","forEach","element","addExperience","config","put","UPDATE_PROFILE","err"],"mappings":"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","sourcesContent":["// Import axios library\nimport axios from 'axios';\n\n// Import our action Types\nimport { GET_PROFILE, PROFILE_ERROR } from '../actions/types';\n\n// Import our setAlert action\nimport { setAlert } from './alert';\n\n// GET / READ PROFILE\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    });\n  }\n}\n\n\n// POST / CREATE PROFILE / EDIT\nexport const createProfile = (\n  formData,\n  // We want to redirect the user after we submit the form, so we use the history object to push to a different client side route.\n  history,\n  // Parameter to determine if it is a create or edit profile.\n  edit = false,\n) => async dispatch => {\n  try {\n    // Make the api call\n    const res = await axios.post('/api/profile/', formData, { headers: { 'Content-type': 'application/json' } })\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n    \n    if (!edit) {\n      // Redirect\n      history.push('/dashboard');\n    }\n\n  } catch (error) {\n    const errors = error.response.data.errors;\n    if(errors) {\n      errors.forEach(element => dispatch(setAlert(element.msg, 'danger')));\n    } \n    \n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    });\n  }\n\n}\n\n// PUT / ADD EXPERIENCE\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.put('/api/profile/experience', formData, config);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Experience Added', 'success'));\n\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}